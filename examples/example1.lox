//comparison between the iteration and the recursion performance
//when calculating the nth term of the fibonacci sequence

//iteratively, it's O(n)
fun fibonacci_1(n){
    var fib1 = 1;
    var fib2 = 1;
    var soma = 0;

    var count = 3;

    while(count <= n){
        soma = fib1 + fib2;
        fib1 = fib2;
        fib2 = soma;
        count = count + 1;
    }
    /*
    the above while statement is equivalent to:
    for(var count = 3; count <= n; count = count + 1){
        soma = fib1 + fib2;
        fib1 = fib2;
        fib2 = soma;
    }
    */
    return fib2;
}

//recursively, it's O(2^n)
fun fibonacci_2(n){
    if(n == 2 or n == 1){
        return 1;
    }
    else{
        return fibonacci_2(n - 2) + fibonacci_2(n - 1);
    }
}

print "Time spent calculating the nth term of fibonacci:";

print "* iteratively:";
var start = clock();
fibonacci_1(18);
var iter = clock() - start;
print iter;

print "* recursively:";
var start = clock();
fibonacci_2(18);
var recur = clock() - start;
print recur;

print "difference:";
print recur - iter;
